{
  "api_documentation": {
    "authentication": {
      "methods": ["API Key", "OAuth 2.0", "JWT"],
      "examples": {
        "api_key": {
          "curl": "curl -H 'Authorization: Bearer YOUR_API_KEY' https://api.example.com/v1/data",
          "python": "import requests\n\nheaders = {'Authorization': 'Bearer YOUR_API_KEY'}\nresponse = requests.get('https://api.example.com/v1/data', headers=headers)",
          "javascript": "const response = await fetch('https://api.example.com/v1/data', {\n  headers: {\n    'Authorization': 'Bearer YOUR_API_KEY'\n  }\n});"
        }
      }
    },
    "endpoints": {
      "users": {
        "base_url": "https://api.example.com/v1/users",
        "methods": ["GET", "POST", "PUT", "DELETE"],
        "examples": {
          "get_user": "GET /v1/users/{user_id}",
          "create_user": "POST /v1/users",
          "update_user": "PUT /v1/users/{user_id}",
          "delete_user": "DELETE /v1/users/{user_id}"
        }
      },
      "data": {
        "base_url": "https://api.example.com/v1/data",
        "methods": ["GET", "POST"],
        "examples": {
          "get_data": "GET /v1/data?limit=10&offset=0",
          "create_data": "POST /v1/data"
        }
      }
    },
    "rate_limiting": {
      "limits": {
        "free": "100 requests/hour",
        "pro": "1000 requests/hour",
        "enterprise": "10000 requests/hour"
      },
      "headers": {
        "X-RateLimit-Limit": "Rate limit for the endpoint",
        "X-RateLimit-Remaining": "Remaining requests in current window",
        "X-RateLimit-Reset": "Time when rate limit resets"
      }
    }
  },
  "troubleshooting": {
    "common_errors": {
      "401_unauthorized": {
        "description": "Authentication failed",
        "causes": ["Invalid API key", "Expired token", "Missing authorization header"],
        "solutions": [
          "Check your API key is correct",
          "Refresh your authentication token",
          "Ensure Authorization header is present"
        ]
      },
      "404_not_found": {
        "description": "Resource not found",
        "causes": ["Invalid endpoint URL", "Resource doesn't exist", "Wrong API version"],
        "solutions": [
          "Verify the endpoint URL is correct",
          "Check if the resource exists",
          "Ensure you're using the correct API version"
        ]
      },
      "429_too_many_requests": {
        "description": "Rate limit exceeded",
        "causes": ["Too many requests in time window", "Exceeded plan limits"],
        "solutions": [
          "Implement exponential backoff",
          "Upgrade your plan for higher limits",
          "Cache responses to reduce API calls"
        ]
      },
      "500_internal_error": {
        "description": "Server error",
        "causes": ["Server maintenance", "Database issues", "Configuration problems"],
        "solutions": [
          "Retry the request after a delay",
          "Check service status page",
          "Contact support if persistent"
        ]
      }
    },
    "integration_guides": {
      "python": {
        "installation": "pip install example-api-client",
        "basic_usage": "from example_api import Client\n\nclient = Client('YOUR_API_KEY')\ndata = client.get_data()",
        "error_handling": "try:\n    response = client.get_data()\nexcept APIError as e:\n    print(f'Error: {e.message}')"
      },
      "javascript": {
        "installation": "npm install example-api-client",
        "basic_usage": "import { Client } from 'example-api-client';\n\nconst client = new Client('YOUR_API_KEY');\nconst data = await client.getData();",
        "error_handling": "try {\n    const response = await client.getData();\n} catch (error) {\n    console.error('Error:', error.message);\n}"
      }
    }
  },
  "best_practices": {
    "security": [
      "Never expose API keys in client-side code",
      "Use environment variables for sensitive data",
      "Implement proper token refresh mechanisms",
      "Validate all input data before sending to API"
    ],
    "performance": [
      "Implement request caching where appropriate",
      "Use pagination for large datasets",
      "Batch requests when possible",
      "Monitor rate limits and implement backoff"
    ],
    "error_handling": [
      "Always check response status codes",
      "Implement retry logic with exponential backoff",
      "Log errors for debugging",
      "Provide user-friendly error messages"
    ]
  }
} 